package assignment_2.model;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/** Generates reports for seller, cashier and owner **/
public class ReportGenerator {
    private Model model;
    private Cash cash;

    public ReportGenerator(Model model) throws IOException{
        this.model = model;
        this.generateReports();
    }

    /** Triggers three functions that generate reports for all three admin users **/ 
    public void generateReports() throws IOException{
        this.sellerReports();
        this.cashierReports();
        this.ownerReports();
    }

    /** Returns a string containing all available items (generated by seller or owner) **/
    public String availableItems(){
        String line = "";
        /* One report contains a list of the current available items that include the item details */
        for (int i = 0; i < this.model.getProductHandler().getAllProducts().size(); i++){
            Product product = this.model.getProductHandler().getAllProducts().get(i);
            String price = String.valueOf(product.getPrice()).replace(',', '.');
            line += String.format("%s,%s,%s,%s,%d\n", product.getProductCategory().getCategoryName(),
                                                                product.getProductName(),
                                                                product.getProductCode(),
                                                                price,
                                                                product.getQuantityAvailable());
        }
        return line;
    }

    /** Returns string containing all sold items **/
    public String soldItems(){
        String line = "";

        /* One report contains a summary that includes items codes, item names and the total number of quantity sold for each item */
        for (int i = 0; i < this.model.getProductHandler().getAllProducts().size(); i++){
            Product product = this.model.getProductHandler().getAllProducts().get(i);
            line += String.format("%s,%s,%d\n", product.getProductName(),
                                                            product.getProductCode(),
                                                            product.getAmountSold());
        }
        return line;
    }

    /** Returns string containing available change in system (generated by cashier or owner) **/
    public String availableChange(){
        String line = "";

        /* Report containing a list of the current available change */
        for (int i = 0; i < this.model.getCashHandler().getQuantity().length; i++){
            int currentQuantity = this.model.getCashHandler().getQuantity()[i];
            String cashAmount = "";
            
            // Check which type of note/coin it is
            if (i == 0){
                cashAmount = "$100";
            } else if (i == 1){
                cashAmount = "$50";
            } else if (i == 2){
                cashAmount = "$20";
            } else if (i == 3){
                cashAmount = "$10";
            } else if (i == 4){
                cashAmount = "$5";
            } else if (i == 5){
                cashAmount = "$2";
            } else if (i == 6){
                cashAmount = "$1";
            } else if (i == 7){
                cashAmount = "50c";
            } else if (i == 8){
                cashAmount = "20c";
            } else if (i == 9){
                cashAmount = "10c";
            } else if (i == 10){
                cashAmount = "5c";
            }

            line += String.format("%s,%d\n", cashAmount, currentQuantity);
        }
        return line;
    }

    /** Returns string containing information about all transactions **/
    public String transactions(){
        String line = "";

        /* Report containing a list of all transactions */
        for (int i = 0; i < this.model.getTransactionHandler().getAllTransactions().size(); i++){
            Transaction currentTransaction = this.model.getTransactionHandler().getAllTransactions().get(i);
            if (!currentTransaction.getCancellationReason().equals("")){
                continue;
            }
            String str = "";
            
            // Add transaction time/date
            str += currentTransaction.getTransactionTime().toString();
            str += ",";

            // Add items sold
            ArrayList<Product> productKeys = new ArrayList<Product>(currentTransaction.getItemsSold().keySet());
            for (int j = 0; j < currentTransaction.getItemsSold().size(); j++){
                str += "item code:";
                str += productKeys.get(j).getProductCode();
                str += ",item name:";
                str += productKeys.get(j).getProductName();
                str += ",quantity:";
                str += currentTransaction.getItemsSold().get(productKeys.get(j));
                str += ",";
            }

            // Add amount of money paid
            for (int j = 0; j < currentTransaction.getMoneyPaid().length; j++){
                if (currentTransaction.getMoneyPaid()[j] > 0){

                    // Label the coin/note
                    str += "payment type:";

                    // Check which type of note/coin it is
                    if (j == 0){
                        str += "$100";
                    } else if (j == 1){
                        str += "$50";
                    } else if (j == 2){
                        str += "$20";
                    } else if (j == 3){
                        str += "$10";
                    } else if (j == 4){
                        str += "$5";
                    } else if (j == 5){
                        str += "$2";
                    } else if (j == 6){
                        str += "$1";
                    } else if (j == 7){
                        str += "50c";
                    } else if (j == 8){
                        str += "20c";
                    } else if (j == 9){
                        str += "10c";
                    } else if (j == 10){
                        str += "5c";
                    }

                    // Add quantity of coins/notes
                    str += ",quantity:";
                    str += String.format("%d,", currentTransaction.getMoneyPaid()[j]);

                    if (j < currentTransaction.getMoneyPaid().length - 1){
                        str += ",";
                    }
                }
            }
            str = str.substring(0, str.length() - 1);

            // Add returned change
            ArrayList<Double> doubleKeys = new ArrayList<Double>(currentTransaction.getReturnedMoney().keySet());
            ArrayList<String> alreadyAddedCash = new ArrayList<String>();
            for (int j = 0; j < currentTransaction.getReturnedMoney().size(); j++){

                // only print if value is higher than 0
                if (currentTransaction.getReturnedMoney().get(doubleKeys.get(j)) > 0 && !alreadyAddedCash.contains(doubleKeys.get(j).toString())){
                    alreadyAddedCash.add(doubleKeys.get(j).toString());
                    str += "change type:";
                    str += doubleKeys.get(j).toString();
                    str += ",quantity:";
                    str += currentTransaction.getReturnedMoney().get(doubleKeys.get(j));

                    if (j < currentTransaction.getReturnedMoney().size() - 1){
                        str += ",";
                    }
                }
            } 
            str += "payment method:cash";
            line += String.format("%s\n", str);
        }
        return line;
    }

    /** Generates cashier reports **/
    public void cashierReports() throws IOException{
        FileWriter availableChange = new FileWriter("src/main/resources/reports/cashier/availableChange.txt");
        FileWriter transactions = new FileWriter("src/main/resources/reports/cashier/transactions.txt");

        availableChange.write(this.availableChange());
        transactions.write(this.transactions());
        
        availableChange.close();
        transactions.close();
    }

    /** Generates seller reports **/
    public void sellerReports() throws IOException{
        FileWriter availableItems = new FileWriter("src/main/resources/reports/seller/availableItems.txt");
        FileWriter soldItems = new FileWriter("src/main/resources/reports/seller/soldItems.txt");

        availableItems.write(this.availableItems());
        soldItems.write(this.soldItems());
        
        availableItems.close();
        soldItems.close();
    }

    /** Generates owner reports **/
    public void ownerReports() throws IOException{
        FileWriter availableItems = new FileWriter("src/main/resources/reports/owner/availableItems.txt");
        FileWriter soldItems = new FileWriter("src/main/resources/reports/owner/soldItems.txt");
        FileWriter availableChange = new FileWriter("src/main/resources/reports/owner/availableChange.txt");
        FileWriter transactions = new FileWriter("src/main/resources/reports/owner/transactions.txt");
        
        availableItems.write(this.availableItems());
        soldItems.write(this.soldItems());
        availableChange.write(this.availableChange());
        transactions.write(this.transactions());

        availableChange.close();
        transactions.close();
        availableItems.close();
        soldItems.close();
        
        FileWriter users = new FileWriter("src/main/resources/reports/owner/users.txt");
        FileWriter cancelledTransactions = new FileWriter("src/main/resources/reports/owner/cancelledTransactions.txt");

        /* One report contains a list of the current users including usernames and roles */
        if (this.model.getAllUsers() != null)
            for (User u : this.model.getAllUsers()){
                String line = String.format("%s,%s\n", u.getUserName(), u.getUserType());
                users.write(line);
            }
        
        users.close();

        /* One report contains a summary of cancelled transactions including date, time, username and reason*/
        for (Transaction t : this.model.getTransactionHandler().getAllTransactions()){
            if (t.getCancellationReason().equals("")){
                continue;
            }

            String line = String.format("%s,%s,%s\n", t.getTransactionTime().toString(),
                                        t.getUsername(), t.getCancellationReason());
            cancelledTransactions.write(line);
        }
        
        cancelledTransactions.close();        
    }
}
